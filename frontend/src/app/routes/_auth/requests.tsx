import {
  getAdminRequests,
  getPrincipalQueryOptions,
  useSendAdminRequestMutation,
} from "@/entities/principal/api";
import { useRequestsTable } from "@/entities/principal/requests-table";
import { PaginatedQuerySchema } from "@/shared/pagination";
import { Button } from "@/shared/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/shared/ui/card";
import { DataTable } from "@/shared/ui/data-table";
import { PaginationFooter } from "@/shared/ui/pagination";
import { useQuery } from "@tanstack/react-query";
import { createFileRoute } from "@tanstack/react-router";
import { z } from "zod";

const SearchSchema = PaginatedQuerySchema;

export const Route = createFileRoute("/_auth/requests")({
  component: Page,
  validateSearch: SearchSchema,
  loaderDeps: ({ search }) => search,
  loader: async ({ context, deps }) => {
    const me = context.queryClient.ensureQueryData(getPrincipalQueryOptions());
    const data = context.queryClient.ensureQueryData(getAdminRequests(deps));
    return Promise.all([me, data]);
  },
});

function Page() {
  const [me] = Route.useLoaderData();
  if (me.role == "ADMIN") {
    return <AdminPage />;
  }
  return <UserPage />;
}

function AdminPage() {
  const [_, initialData] = Route.useLoaderData();
  const search = Route.useSearch();
  const { data } = useQuery({ ...getAdminRequests(search), initialData });
  const table = useRequestsTable(data.values);
  const navigate = Route.useNavigate();
  function setQuery(
    updater: (
      previous: z.infer<typeof SearchSchema>,
    ) => z.infer<typeof SearchSchema>,
  ) {
    void navigate({
      search: updater,
    });
  }

  return (
    <div className="space-y-8">
      <Card className="mx-auto max-w-lg bg-green-500 text-slate-50">
        <CardHeader>
          <CardTitle>üéâ Congratulations!</CardTitle>
        </CardHeader>
        <CardContent>
          –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
          –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤—Å–µ—Ö
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        </CardContent>
      </Card>
      <main className="max-w-lg mx-auto space-y-4">
        <DataTable table={table} />
        <PaginationFooter
          query={search}
          setQuery={setQuery}
          total={data.total}
        />
      </main>
    </div>
  );
}

function UserPage() {
  const [initialData] = Route.useLoaderData();
  const { data: me } = useQuery({ ...getPrincipalQueryOptions(), initialData });
  if (me.adminRequestStatus == "NO_REQUEST") {
    return <NoRequestCard />;
  }
  if (me.adminRequestStatus == "PENDING") {
    return <PendingCard />;
  }
}

function NoRequestCard() {
  const { mutate, isPending } = useSendAdminRequestMutation();
  return (
    <div>
      <Card className="mx-auto max-w-lg">
        <CardHeader>
          <CardTitle>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</CardTitle>
        </CardHeader>
        <CardContent>
          –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ—Å–ª–µ
          —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏ –¥—Ä—É–≥–∏—Ö
          –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —Ç–∞–∫–∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ
          —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –æ–±—ä–µ–∫—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
        </CardContent>
        <CardFooter>
          <Button onClick={() => mutate()} disabled={isPending}>
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

function PendingCard() {
  return (
    <div>
      <Card className="mx-auto max-w-lg bg-yellow-300">
        <CardHeader>
          <CardTitle>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ</CardTitle>
        </CardHeader>
        <CardContent>
          –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –°–µ–π—á–∞—Å –æ–Ω–∞
          –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
        </CardContent>
      </Card>
    </div>
  );
}
