---
x-healthcheck: &healthcheck
  interval: 10s
  timeout: 5s
  retries: 5
  start_period: 15s

x-healthy: &healthy
  condition: service_healthy

networks:
  traefik-ingress:
    external: true
  internal:
    external: false

services:
  frontend:
    container_name: "is__frontend"
    image: ${FRONTEND_IMAGE}
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "curl", "-f", "http://localhost:80"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.lab1-frontend.rule=PathPrefix(`/`)&&Host(`${HOST}`)
      - traefik.http.routers.lab1-frontend.entrypoints=webSecure
      - traefik.http.routers.lab1-frontend.tls=true
      - traefik.http.routers.lab1-frontend.tls.certresolver=letsEncrypt
      - traefik.http.services.lab1-frontend.loadbalancer.server.port=80
    networks:
      - traefik-ingress
  minio:
    container_name: "is__minio"
    image: ${MINIO_IMAGE}
    command: server /data --console-address ":443"
    healthcheck:
      <<: *healthcheck
      test: ["CMD", "mc", "ready", "local"]
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://minioadm.${HOST}
    labels:
      - traefik.enable=true
      - traefik.http.routers.minio-user.rule=Host(`minio.${HOST}`)
      - traefik.http.routers.minio-user.entrypoints=webSecure
      - traefik.http.routers.minio-user.tls=true
      - traefik.http.routers.minio-user.tls.certresolver=letsEncrypt
      - traefik.http.routers.minio-user.service=minio-user
      # MINIO ADMIN CONFIGURATION
      - traefik.http.routers.minio-admin.rule=Host(`minioadm.${HOST}`)
      - traefik.http.routers.minio-admin.entrypoints=webSecure
      - traefik.http.routers.minio-admin.tls=true
      - traefik.http.routers.minio-admin.tls.certresolver=letsEncrypt
      - traefik.http.routers.minio-admin.service=minio-admin
      # SERVICES CONFIGURATION
      - traefik.http.services.minio-user.loadbalancer.server.port=9000
      - traefik.http.services.minio-admin.loadbalancer.server.port=443
    networks:
      - traefik-ingress
    volumes:
      - minio:/data
  backend:
    container_name: "is__backend"
    image: ${BACKEND_IMAGE}
    environment:
      - POSTGRES_HOST=postgres:5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_TTL=${JWT_ACCESS_TTL}
      - JWT_REFRESH_TTL=${JWT_REFRESH_TTL}
    labels:
      - traefik.enable=true
      - traefik.http.routers.lab1-backend.entrypoints=webSecure
      - traefik.http.routers.lab1-backend.rule=PathPrefix(`/api`)&&Host(`${HOST}`)
      - traefik.http.routers.lab1-backend.tls=true
      - traefik.http.routers.lab1-backend.tls.certresolver=letsEncrypt
      - traefik.http.services.lab1-backend.loadbalancer.server.port=8080
    depends_on:
      postgres:
        condition: "service_healthy"
    networks:
      - traefik-ingress
      - internal

  postgres:
    container_name: "is__postgres"
    image: ${POSTGRES_IMAGE}
    healthcheck:
      <<: *healthcheck
      start_period: 1s
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - traefik-ingress
      - internal

volumes:
  pgdata:
    driver: local
  minio:
    driver: local
